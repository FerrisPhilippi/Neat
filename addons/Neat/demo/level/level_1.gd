extends Node2D

@onready var start: Node2D = $Start

var agent_body_path = "res://addons/Neat/demo/pawns/car.tscn"
var ga = GeneticAlgorithm.new(4, 4, agent_body_path, true, 'car_params')

# 1.0 = one second. time gets reset every time_step, then all agents get updated
var time = 0
# total_time gets reset every time a new generation is started
var total_time = 0
# every time_step the cars network takes sensory information and decides how to act
var time_step = 0.2
# every generation_step a new generation is made. this gets increased over time.
var generation_step = 15
var paused = true
var curr_track_num: int
# end the demo when the first car reaches this. TAU (360 degrees) = complete one track
var fitness_threshold = TAU + 1

func _ready() -> void:
	add_child(ga)
	place_bodies(ga.get_curr_bodies())
	paused = false

func place_bodies(bodies: Array) -> void:
	"""Adds the bodies scenes generated by the ga to the tree, and removes the old ones.
	"""
	# remove the bodies from the last generation
	for last_gen_body in start.get_children():
		last_gen_body.queue_free()
	# add the new bodies to the track
	for body in bodies:
		start.add_child(body)

func _physics_process(delta: float) -> void:
	if not paused:
		time += delta; total_time += delta
		# if enough time has passed for the next time_step, update all agents
		if time > time_step:
			ga.next_timestep()
			time = 0
		# check if enough time has passed to start a new generation
		if total_time > generation_step or ga.all_agents_dead:
			# check if the best agent exceeded the fitness threshold
			ga.evaluate_generation()
			if ga.curr_best.fitness > fitness_threshold:
				# either resume with next generation or switch to demo-choosing scene
				end_car_demo()
			# go to the next gen
			ga.next_generation()
			place_bodies(ga.get_curr_bodies())
			# every x gens, increase the generation_step
			if ga.curr_generation % 2 == 0:
				generation_step += 6
				print("increased step to " + str(generation_step))
			total_time = 0

func end_car_demo():
	continue_ga(fitness_threshold)

func continue_ga(new_threshold) -> void:
	"""Continue the evolution until new_threshold is reached.
	"""
	fitness_threshold = new_threshold
	paused = false
